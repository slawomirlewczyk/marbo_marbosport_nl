
const oscopClient = (function runOscop() {
    const vars = { ajaxUrl: { singin: '/ajax/login.php', validation: '/ajax/client-new.php?validAjax=true', checkClientExists: '/ajax/client-new.php?checkClientExists=true', addClient: '/ajax/client-new.php?addClient=true', editClient: '/ajax/client-new.php?editClient=true', addDeliveryAddress: '/ajax/client-new.php?addDeliveryAddress=true', delDeliveryAddress: '/ajax/client-new.php?removeAddres=true', editDeliveryAddress: '/ajax/client-new.php?editDeliveryAddress=true', changeRegion: '/ajax/client-new.php?setRegionForOneTimeClient=1', }, timeHandle: null, timeout: 16000, }; const txt = { 
        emailAlreadyRegistered: "We hebben al een account geregistreerd voor het door u opgegeven e-mailadres: ", 
        sendEmailAllowAutomaticLogin: "Stuur e-mail voor automatische aanmelding", 
        iRememberMyLogin: "Ik herinner me mijn gebruikersnaam en wachtwoord en kan ze geven.", 
        createNewAccountUsing: "Ik wil een nieuwe account aanmaken met dit adres" + "(" + "niet aanbevolen" + ").", 
        mergeEarlierCreatedAccount: "<br/>" + "De eerder aangemaakte rekening is gekoppeld aan de", 
        weSuggestUsingThisAccount: "Wij raden u aan deze account te gebruiken, zodat u kunt genieten van de privileges die voorbehouden zijn aan vaste klanten. Om in te loggen op uw eerder aangemaakte account, klikt u gewoon op de link die wij u in de e-mail sturen.", 
        emptyInput: "Gelieve dit veld in te vullen.", 
        loginNoData: "Alle inloggegevens ontbreken.", 
        accountBadLogin: "Het door u ingevoerde login of wachtwoord is niet correct.", }; const afterCheckEmail = ({ login, mail, client_exists, external_service, client_propose_login }) => { if (login) return false; if (!client_exists) return false; const template = `<div id="dialog_client_mail_propose1"><div class="propose_main"><div class="propose_info">${txt.emailAlreadyRegistered}<div class="propose_json_mail">${mail}</div>${external_service ? txt.mergeEarlierCreatedAccount + external_service.name : ''}</div><p class="cn_propose_desc">${txt.weSuggestUsingThisAccount}</p><div class="cn_propose_desc"><div><a class="btn --solid button_password_recover"href="/password-recover.php?operation=recover&email=${mail}">${txt.sendEmailAllowAutomaticLogin}</a></div><div><a href="/signin.php">${txt.iRememberMyLogin}</a></div><div><a href="#close"class="place-order__close_toplayer_link">${txt.createNewAccountUsing}</a></div></div></div></div>`; $('body').dialog({ content: template, }); if (client_propose_login && !$('#client_login').val()) { $('#client_login').val(client_propose_login); } }; const enabled = (obj) => { obj.find('input, select.delivery_countries, .client_provinces:visible select').attr('disabled', false); }; const disabled = (obj) => { obj.find('input, select.delivery_countries, .client_provinces:visible select').not('[name=delivery_id], [name=default_delivery_id]').attr('disabled', true); obj.find('.validate_message').remove(); obj.find('.--error').removeClass('--error'); obj.find('.--success').removeClass('--success'); }; const clearValidation = (obj) => { obj.removeClass('--success').removeClass('--error').removeClass('--required'); }; const resetRequiredClass = () => { $('#place-order__client-data input.validate[required]').parent().not('.--success, .--error, .--checkbox').addClass('--required'); }; const useVat = () => { const currCountry = $('#place-order__client-data [name=client_region]').val(); if (($(`#place-order__client-data[name=client_region]option[value="${currCountry}"]`).data('vat_company') === 'n' || ($(`#place-order__client-data[name=client_region]option[value="${currCountry}"]`).data('vat_company') === '' && $(`#place-order__client-data[name=client_region]option[value="${currCountry}"]`).data('vat') === 'y')) && $('input[name="client_type"]:checked').val() === 'firm') { $('#vat_company').parents('div.--checkbox').show(); } else { $('#vat_company').parents('div.--checkbox').hide(); } }; const addSucces = (obj) => { const target = obj.is('[type=checkbox]') ? obj.parents('div.--checkbox') : obj.parent(); clearValidation(target); target.addClass('--success'); }; const addError = (obj) => { const target = obj.is('[type=checkbox]') ? obj.parents('div.--checkbox') : obj.parent(); clearValidation(target); target.addClass('--error'); }; const removeErrorInfo = (obj) => { obj.parents('.f-group').find('.validate_message').remove(); }; const checkValidateFields = (onlyErrors) => {
        const inputs = $('#place-order__client-data input.validate:enabled:visible'); const checkbox = $('#place-order__summary input[required]').not('[disabled]').not(':checked'); let empty = true; let required = true; $('#summary__einvoice').addClass('col-12 col-sm-6'); $('#wants_einvoice').addClass('focused'); $('#oscop_client').append($('#summary__einvoice')); $('#place-order__summary input[required]').parents('.--error').removeClass('--error'); if (checkbox.length) { checkbox.each(function eachFn() { addError($(this)); }); }
        if (inputs.length) {
            inputs.each(function eachFn() { const target = $(this); empty = !$.trim(target.val()); required = target.is('[required]'); removeErrorInfo(target); if (required && empty) { addError(target); target.parents('.f-group').find(' > div').append(`<span class="help-block validate_message text-danger">${txt.emptyInput}</span>`); } else if (!empty) { if (!onlyErrors) addSucces(target); } else { if (!onlyErrors) clearValidation(target.parent()); } }); resetRequiredClass(); const errorItem = $('#place-order__client-data .--error:visible, #place-order__summary .--error:visible').first(); if (!onlyErrors) { return true; }
            const stickyHeaderDesktopOffsetTop = app_shop.vars.stickyHeaderDesktopOffsetTop ? app_shop.vars.stickyHeaderDesktopOffsetTop : 0; const stickyHeaderOffsetTop = app_shop.vars.view < 2 ? $('header').outerHeight() : stickyHeaderDesktopOffsetTop; if (errorItem.length) { $('html, body').animate({ scrollTop: errorItem.first().offset().top - 10 - stickyHeaderOffsetTop, }, 300); return false; }
            return true;
        }
    }; const validate = (obj, callbackSuccess) => {
        const target = obj; const wrapper = target.parent(); let reqData = target.serialize(); if (target.data('serialize')) { reqData += '&' + $(target.data('serialize')).serialize(); }
        if (target.data('revalidate')) { $(target.data('revalidate')).each(function revalidateEacHFn() { validate($(this)); }); }
        if (target.val() === '') {
            clearValidation(wrapper); if (target.is('[required]')) { wrapper.addClass('--required'); }
            removeErrorInfo(target); return false;
        }
        oscop.ajax({ url: vars.ajaxUrl.validation, type: 'POST', timeout: vars.timeout, dataType: 'JSON', data: reqData, }, true).then(function succesFn(args0) {
            const resData = args0[0]; if (resData.errno) {
                var error_message = ''; if (resData.message.error_code) {
                    if (resData.message.zipcode_pattern && (resData.message.error_code == 'incorect_zipcode' || resData.message.error_code == 'incorect_delivery_zipcode')) { error_message = clientNewErrorCode[resData.message.error_code] + ' ' + clientnew_14_txt + ' '; error_message += resData.message.zipcode_pattern.join(', '); } else if ((resData.message.error_code == 'password_to_short' || resData.message.error_code == 'password_to_long')) {
                        if (resData.message.error_code == 'password_to_short')
                            error_message = clientNewErrorCode['password_to_short'] + ' ' + ClNewPasswordLengthMin + ' ' + clientnew_15c_txt; if (resData.message.error_code == 'password_to_long')
                            error_message = clientNewErrorCode['password_to_long'] + ' ' + ClNewPasswordLengthMax + ' ' + clientnew_15c_txt;
                    } else if (clientNewErrorCode[resData.message.error_code]) { error_message = clientNewErrorCode[resData.message.error_code]; }
                }
                addError(target); if (error_message) { removeErrorInfo(target); target.parents('.f-group').find(' > div').append('<span class="help-block validate_message text-danger">' + error_message + '</span>'); }
            } else {
                addSucces(target); removeErrorInfo(target); if (target.is('[name=client_email]')) { const checkClientExistsData = { 'client_mail': $('#client_email').val(), }; oscop.ajax({ url: vars.ajaxUrl.checkClientExists, type: 'POST', timeout: vars.timeout, dataType: 'JSON', data: checkClientExistsData, }).then(function succesFn(args0) { const resData = args0[0]; afterCheckEmail(resData); }); }
                if (callbackSuccess) callbackSuccess();
            }
        });
    }; const focused = (obj) => {
        if (obj.val() != '') { obj.addClass('focused'); }
        else { obj.removeClass('focused'); }
    }; const saveDeliveryAdress = () => { const data = $('#oscop_delivery *').serialize(); oscop.ajax({ url: vars.ajaxUrl.addDeliveryAddress, type: 'POST', timeout: vars.timeout, dataType: 'JSON', data, }); }; const delDeliveryAdress = () => { const data = { address: $('#delivery_id').val(), }; oscop.ajax({ url: vars.ajaxUrl.delDeliveryAddress, type: 'POST', timeout: vars.timeout, dataType: 'JSON', data, }); }; const editDeliveryAddress = () => { if (!checkValidateFields(true)) return false; const reqData = $('#oscop_delivery input, #oscop_delivery select').serialize(); oscop.ajax({ url: vars.ajaxUrl.editDeliveryAddress, type: 'POST', timeout: vars.timeout, dataType: 'JSON', data: reqData, }).then(function succesFn(args0) { const resData = args0[0]; if (resData.errno) { const message = resData.message ? resData.message : $.map(resData.validationErrors, function mapFn(error) { return error.description; }).join('<br/>'); Alertek.show_alert(message); return false; } }); }; const addDeliveryAddress = () => { if (!checkValidateFields(true)) return false; const reqData = $('#oscop_delivery input, #oscop_delivery select').serialize(); oscop.ajax({ url: vars.ajaxUrl.addDeliveryAddress, type: 'POST', timeout: vars.timeout, dataType: 'JSON', data: reqData, }).then(function succesFn(args0) { const resData = args0[0]; if (resData.errno) { const message = resData.message ? resData.message : $.map(resData.validationErrors, function mapFn(error) { return error.description; }).join('<br/>'); Alertek.show_alert(message); return false; } }); }; const editClient = () => {
        const deliveryData = $('#oscop_delivery input, #oscop_delivery select').serialize(); const clientData = $('#oscop_client input, #oscop_client select').serialize(); const reqData = `${clientData}&${deliveryData}`; oscop.ajax({ url: vars.ajaxUrl.editClient, type: 'POST', timeout: vars.timeout, dataType: 'JSON', data: reqData, }).then(function succesFn(args0) {
            const resData = args0[0]; if (resData.errno) { const message = resData.message ? resData.message : $.map(resData.validationErrors, function mapFn(error) { return error.description; }).join('<br/>'); Alertek.show_alert(message); return false; }
            oscop.reloadPlaceOrder([{ ajaxId: 'place-order__client-data', element: '#place-order__client-data', }]);
        });
    }; const addClient = (succes, error) => {
        const deliverToBillingaddr = parseInt($("input[name='deliver_to_billingaddr']:checked").val()); const clientData = $('#oscop_client input, #oscop_client select').serialize(); const loginData = $('#client-data__register-data input, #client-data__register-data select').serialize(); const switcherData = $('#client-data__register-switch input').serialize(); const deliveryData = deliverToBillingaddr ? clientData.replace(/client_/gi, 'delivery_') : $('#oscop_delivery input, #oscop_delivery select').serialize(); const reqData = `${clientData}&${loginData}&${switcherData}&${deliveryData}`; oscop.ajax({ url: vars.ajaxUrl.addClient, type: 'POST', timeout: vars.timeout, dataType: 'JSON', data: reqData, }).then(function succesFn(args0) {
            const resData = args0[0]; if (resData.errno) {
                const message = resData.message ? resData.message : $.map(resData.validationErrors, function mapFn(error) { return error.description; }).join('<br/>'); Alertek.show_alert(message); if (resData.error === 'unable_to_add_client_already_log_in') { oscop.reloadPlaceOrder([{ ajaxId: 'place-order__client-data', element: '#place-order__client-data', }, { ajaxId: 'place-order__summary', element: '.summary__regulations ' }]); }
                error(); return false;
            }
            succes();
        });
    }
    const login = (data) => {
        oscop.ajax({ url: vars.ajaxUrl.singin, type: 'POST', timeout: vars.timeout, dataType: 'JSON', data, }).then(function succesFn(args0) {
            const resData = args0[0]; const errorTxt = []; errorTxt['no data'] = txt.loginNoData; errorTxt['account_badlogin'] = txt.accountBadLogin; if (resData.message) {
                let errorMsg = resData.message; if (errorTxt[errorMsg]) { errorMsg = errorTxt[errorMsg]; }
                Alertek.show_alert(errorMsg);
            }
            if (resData.status === 'OK') { oscop.reloadPlaceOrder([{ ajaxId: 'place-order__client-data', element: '#place-order__client-data', }, { ajaxId: 'place-order__summary', element: '.summary__regulations ', }], checkValidateFields); }
        });
    }
    const changeRegion = () => {
        const billingRegion = oscop.getState('client_region'); const deliveryRegion = oscop.getState('deliver_to_billingaddr') === '0' ? oscop.getState('delivery_region') : billingRegion; oscop.ajax({ url: vars.ajaxUrl.changeRegion, type: 'GET', timeout: vars.timeout, dataType: 'JSON', data: `billingRegionId=${billingRegion}&deliveryRegionId=${deliveryRegion}`, }).then(function succesFn(args0) {
            const resData = args0[0]; if (resData.errno) { Alertek.show_alert(data.message); }
            oscop.reloadPlaceOrder();
        });
    }
    const changeAdress = () => { const reqData = $('#place-order__form').serialize(); oscop.ajax({ url: '/client-new.php?edit', type: 'POST', timeout: vars.timeout, dataType: 'HTML', data: reqData, }).then(function succesFn() { oscop.reloadPlaceOrder([{ ajaxId: 'place-order__client-data', element: '#oscop_delivery', }]); }); }
    const buildInteractiveElements = () => { $("#birth_date").datepicker({ dateFormat: iaical_dateFormat, dayNamesMin: iaical_daysShort, monthNames: iaical_monthNames, monthNamesShort: iaical_shortNames, nextText: iaical_monthNext, prevText: iaical_monthPrev, buttonText: ' ', firstDay: iaical_firstDay, changeMonth: true, changeYear: true, onSelect() { validate($("#birth_date")); focused($('#birth_date')); }, maxDate: '+0', minDate: new Date(1920, 1 - 1, 1), yearRange: '-100:+0' }); }
    const init = () => {
        buildInteractiveElements(); $('#place-order').on('change', 'input[name="register_order"]', function registerOrderChangeFn() {
            const orderWithRegister = $(this).val() === '1'; const registerDataSection = $('#client-data__register-data'); if (orderWithRegister) { enabled(registerDataSection); registerDataSection.removeClass('hidden'); } else { registerDataSection.addClass('hidden'); disabled(registerDataSection); }
            resetRequiredClass();
        }); $('#place-order').on('change', 'input[name="client_type"]', function clientTypeChangeFn() {
            const isPrivate = $(this).val() === 'private'; const firmGroupItems = $('div.firm-group'); if (isPrivate) { is_firm = false; firmGroupItems.addClass('hidden'); disabled(firmGroupItems); } else { is_firm = true; enabled(firmGroupItems); firmGroupItems.removeClass('hidden'); }
            useVat();
        }); $('#place-order').on('change', 'input[name="deliver_to_billingaddr"]', function deliveryChangeFn() {
            const deliveryToBillingAdress = $(this).val() === '1'; const deliverySection = $('#oscop_delivery'); if (deliveryToBillingAdress) { deliverySection.addClass('hidden'); disabled(deliverySection); resetRequiredClass(); } else { enabled(deliverySection); deliverySection.removeClass('hidden'); }
            changeRegion();
        }); $('#place-order').on('click', 'ul.addresses-list a', function setAdressFn(e) { e.preventDefault(); const selectedAdress = $(this); $('ul.addresses-list a').removeClass('active'); selectedAdress.addClass('active'); const adress = { id: selectedAdress.data('id'), additional: selectedAdress.find('.data-additional').text(), firstname: selectedAdress.find('.data-firstname').text(), lastname: selectedAdress.find('.data-lastname').text(), street: selectedAdress.find('.data-street').text(), city: selectedAdress.find('.data-city').text(), zipcode: selectedAdress.data('zipcode'), phone: selectedAdress.data('phone'), region_id: selectedAdress.data('region_id'), country_name: selectedAdress.data('country_name'), editable: selectedAdress.data('editable'), removable: selectedAdress.data('removable'), used: selectedAdress.data('used'), }; $.each(adress, function eachFn(key, value) { $('#delivery_' + key).val(value); }); $('#place-order-register #additional_region').val(adress.region_id); $('#place-order-register #delivery_id').val(adress.id); disabled($('#oscop_delivery')); changeAdress(); }); $('#place-order').on('change', 'select[name="client_region"], select[name="delivery_region"]', function regionChangeFn() { changeRegion(); }); $('#place-order').on('input', '.f-group input.validate', function onInputFn() { clearTimeout(vars.timeHandle); const target = $(this); vars.timeHandle = setTimeout(function timeHandleTimeoutFn() { validate(target); }, 500); if (target.is('[data-copy]')) { const el = $('#' + target.data('copy')); if (el.is(':disabled')) el.val(target.val()); } }); $('#place-order').on('change', '.f-group input.validate', function onInputFn() { validate($(this)); }); $('#place-order').on('change', 'select.delivery_countries', function changeFn() { const target = $(this); const wrapper = target.parents('#oscop_client').length ? target.parents('#oscop_client') : target.parents('#oscop_delivery'); wrapper.find('div.client_provinces').hide(); wrapper.find('div.client_provinces select').attr('disabled', true); const element = $('#' + target.attr('name') + '_' + target.val()); element.show().find('select').attr('disabled', false); useVat(); $('#' + target.attr('name').replace('regio', 'zipcode')).trigger('input'); }); $('#place-order').on('click', 'input[name=client_generate_password_n]', function changeFn() { const generatePassword = $(this).val() === 'y'; if (generatePassword) { $('div.password-group').hide(); disabled($('div.password-group')); } else { $('div.password-group').show(); enabled($('div.password-group')); } }); $('#place-order').on('click', '#shop-login-btn', function showLoginToplayerFn() { oscop.toplayer({ show: true, selector: '#login-toplayer', size: 'small', }); }); $('#content').on('click', '#login-toplayer .signin_button', function submitLoginFormFn(e) { e.preventDefault(); const data = $('#login-toplayer').serialize(); login(data); oscop.toplayer(false); }); useVat();
    }
    return { addClient, checkValidateFields, init, };
}()); app_shop.run(function runClientData() { oscopClient.init(); }, 'all', '#place-order__client-data');